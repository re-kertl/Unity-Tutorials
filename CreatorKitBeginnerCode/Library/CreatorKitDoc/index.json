{
  "api/CreatorKitCode.EquipmentItem.html": {
    "href": "api/CreatorKitCode.EquipmentItem.html",
    "title": "Class EquipmentItem | SceneKit Code Documentation",
    "keywords": "Class EquipmentItem Special Item than can be equipped. They can have a minimum stats value needed to equip them, and you can add EquippedEffect which will be executed when the object is equipped and unequipped, allowing to code special behaviour when the player equipped those object, like raising stats. Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject Item EquipmentItem Weapon Inherited Members Item.ItemName Item.ItemSprite Item.Description Item.WorldObjectPrefab Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [CreateAssetMenu(fileName = \"EquipmentItem\", menuName = \"Beginner Code/Equipment Item\", order = -999)] public class EquipmentItem : Item Fields EquippedEffects Declaration public List<EquipmentItem.EquippedEffect> EquippedEffects Field Value Type Description System.Collections.Generic.List < EquipmentItem.EquippedEffect > MinimumAgility Declaration public int MinimumAgility Field Value Type Description System.Int32 MinimumDefense Declaration public int MinimumDefense Field Value Type Description System.Int32 MinimumStrength Declaration [Header(\"Minimum Stats\")] public int MinimumStrength Field Value Type Description System.Int32 Slot Declaration public EquipmentItem.EquipmentSlot Slot Field Value Type Description EquipmentItem.EquipmentSlot Methods EquippedBy(CharacterData) Declaration public void EquippedBy(CharacterData user) Parameters Type Name Description CharacterData user GetDescription() Declaration public override string GetDescription() Returns Type Description System.String Overrides Item.GetDescription() UnequippedBy(CharacterData) Declaration public void UnequippedBy(CharacterData user) Parameters Type Name Description CharacterData user UsedBy(CharacterData) Declaration public override bool UsedBy(CharacterData user) Parameters Type Name Description CharacterData user Returns Type Description System.Boolean Overrides Item.UsedBy(CharacterData)"
  },
  "api/CreatorKitCode.Container.html": {
    "href": "api/CreatorKitCode.Container.html",
    "title": "Class Container | SceneKit Code Documentation",
    "keywords": "Class Container Special InteractableObject that will trigger the LootSpawner on it when interacted with, and delete itself (a container can only be looted once). Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour HighlightableObject InteractableObject Container Inherited Members HighlightableObject.m_Renderers HighlightableObject.Highlight() HighlightableObject.Dehighlight() Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [RequireComponent(typeof(LootSpawner))] public class Container : InteractableObject Properties IsInteractable Declaration public override bool IsInteractable { get; } Property Value Type Description System.Boolean Overrides InteractableObject.IsInteractable Methods InteractWith(CharacterData) Declaration public override void InteractWith(CharacterData target) Parameters Type Name Description CharacterData target Overrides InteractableObject.InteractWith(CharacterData) Start() Declaration protected override void Start() Overrides HighlightableObject.Start()"
  },
  "api/CreatorKitCode.VFXDatabase.VFXDBEntry.html": {
    "href": "api/CreatorKitCode.VFXDatabase.VFXDBEntry.html",
    "title": "Class VFXDatabase.VFXDBEntry | SceneKit Code Documentation",
    "keywords": "Class VFXDatabase.VFXDBEntry An entry in the VFXDatabase, storing all the data needed to create the pools of instances of VFX. Inheritance System.Object VFXDatabase.VFXDBEntry Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class VFXDBEntry Fields Name Declaration public string Name Field Value Type Description System.String PoolSize Declaration public int PoolSize Field Value Type Description System.Int32 Prefab Declaration public GameObject Prefab Field Value Type Description UnityEngine.GameObject"
  },
  "api/CreatorKitCode.VFXDatabase.html": {
    "href": "api/CreatorKitCode.VFXDatabase.html",
    "title": "Class VFXDatabase | SceneKit Code Documentation",
    "keywords": "Class VFXDatabase Allows you to define a list of VFX prefabs each with a name. An editor script takes care of generating a C# file containing an enum with the given name to index the Entries array. This allows you to call methods such as VFXManager.GetVFX(VFXType.MyEffectName). See the VFXManager class for more details. Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject VFXDatabase Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class VFXDatabase : ScriptableObject Fields Entries Declaration public VFXDatabase.VFXDBEntry[] Entries Field Value Type Description VFXDatabase.VFXDBEntry []"
  },
  "api/CreatorKitCode.StatSystem.StatModifier.html": {
    "href": "api/CreatorKitCode.StatSystem.StatModifier.html",
    "title": "Class StatSystem.StatModifier | SceneKit Code Documentation",
    "keywords": "Class StatSystem.StatModifier Can be added to a stack of modifiers on the StatSystem to modify the value of the base stats e.g. a weapon adding +2 strength will push a modifier on the top of the stack. They have 2 modes : Absolute, where values are added as is, and Percentage, where values are converted to percentage (e.g. a value of 50 in strength in a Percentage modifier will increase the strength by 50%). Inheritance System.Object StatSystem.StatModifier Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class StatModifier Fields ModifierMode Declaration public StatSystem.StatModifier.Mode ModifierMode Field Value Type Description StatSystem.StatModifier.Mode Stats Declaration public StatSystem.Stats Stats Field Value Type Description StatSystem.Stats"
  },
  "api/CreatorKitCode.SFXManager.PlayData.html": {
    "href": "api/CreatorKitCode.SFXManager.PlayData.html",
    "title": "Class SFXManager.PlayData | SceneKit Code Documentation",
    "keywords": "Class SFXManager.PlayData Store all data used to play a sound. The pitch will be picked randomly between PitchMin and PitchMax. Inheritance System.Object SFXManager.PlayData Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class PlayData Fields Clip Declaration public AudioClip Clip Field Value Type Description UnityEngine.AudioClip PitchMax Declaration public float PitchMax Field Value Type Description System.Single PitchMin Declaration public float PitchMin Field Value Type Description System.Single Position Declaration public Vector3 Position Field Value Type Description UnityEngine.Vector3 Volume Declaration public float Volume Field Value Type Description System.Single"
  },
  "api/CreatorKitCode.HighlightableObject.html": {
    "href": "api/CreatorKitCode.HighlightableObject.html",
    "title": "Class HighlightableObject | SceneKit Code Documentation",
    "keywords": "Class HighlightableObject All object that can be highlighted (enemies, interactable object etc.) derive from this class, which takes care of setting the material parameters for it when it gets highlighted. If the object use another material, it will just ignore all the changes. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour HighlightableObject CharacterData InteractableObject Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class HighlightableObject : MonoBehaviour Fields m_Renderers Declaration protected Renderer[] m_Renderers Field Value Type Description UnityEngine.Renderer [] Methods Dehighlight() Call this when the object is done being highlighted, this will switch all the material parameters to make it back to normal Declaration public void Dehighlight() Highlight() Call this when the object is highlighted, this will switch all the material parameters to make it glow Declaration public void Highlight() Start() Declaration protected virtual void Start()"
  },
  "api/CreatorKitCodeInternal.AnimationControllerDispatcher.IAttackFrameReceiver.html": {
    "href": "api/CreatorKitCodeInternal.AnimationControllerDispatcher.IAttackFrameReceiver.html",
    "title": "Interface AnimationControllerDispatcher.IAttackFrameReceiver | SceneKit Code Documentation",
    "keywords": "Interface AnimationControllerDispatcher.IAttackFrameReceiver Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public interface IAttackFrameReceiver Methods AttackFrame() Declaration void AttackFrame()"
  },
  "api/CreatorKitCode.VFXManager.html": {
    "href": "api/CreatorKitCode.VFXManager.html",
    "title": "Class VFXManager | SceneKit Code Documentation",
    "keywords": "Class VFXManager Handles displaying VFX in the game. One instance should be in the scene, and is part of the Manager prefab. It will create pools of the VFX prefabs defined in the given VFXDatabase, and through the GetVFX/PlayVFX methods allows you to get an instance at a given position. The pools are rotating queue, so when you are finished with an instance, that instance will be moved to the back of the available instance queue. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour VFXManager Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class VFXManager : MonoBehaviour Fields Database Declaration public VFXDatabase Database Field Value Type Description VFXDatabase Methods GetVFX(VFXType) Return a VFXInstance of the given type. use instance.Effect to access the gameobject. It will be SetActive by the function, so you just have to place it. Declaration public static VFXManager.VFXInstance GetVFX(VFXType type) Parameters Type Name Description VFXType type The type of VFX wanted. This enum will be generated by a tool in the Editor based on the VFXDatabase entries Returns Type Description VFXManager.VFXInstance The instance that was in front of the pool queue PlayVFX(VFXType, Vector3) This is a shortcut, will get a VFX of the given type and will place it at the given position Declaration public static VFXManager.VFXInstance PlayVFX(VFXType type, Vector3 position) Parameters Type Name Description VFXType type The type of VFX wanted. This enum will be generated by a tool in the Editor based on the VFXDatabase entries UnityEngine.Vector3 position Where the VFX will be placed Returns Type Description VFXManager.VFXInstance The Instance it just placed, can be useful if the effect isn't auto-disabled (e.g. looping effect)"
  },
  "api/CreatorKitCode.UsableItem.UsageEffect.html": {
    "href": "api/CreatorKitCode.UsableItem.UsageEffect.html",
    "title": "Class UsableItem.UsageEffect | SceneKit Code Documentation",
    "keywords": "Class UsableItem.UsageEffect Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UsableItem.UsageEffect Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public abstract class UsageEffect : ScriptableObject Fields Description Declaration public string Description Field Value Type Description System.String Methods Use(CharacterData) Declaration public abstract bool Use(CharacterData user) Parameters Type Name Description CharacterData user Returns Type Description System.Boolean"
  },
  "api/CreatorKitCode.LootSpawner.SpawnEvent.html": {
    "href": "api/CreatorKitCode.LootSpawner.SpawnEvent.html",
    "title": "Class LootSpawner.SpawnEvent | SceneKit Code Documentation",
    "keywords": "Class LootSpawner.SpawnEvent Inheritance System.Object LootSpawner.SpawnEvent Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class SpawnEvent Fields Entries Declaration public LootSpawner.LootEntry[] Entries Field Value Type Description LootSpawner.LootEntry []"
  },
  "api/CreatorKitCode.InventorySystem.InventoryEntry.html": {
    "href": "api/CreatorKitCode.InventorySystem.InventoryEntry.html",
    "title": "Class InventorySystem.InventoryEntry | SceneKit Code Documentation",
    "keywords": "Class InventorySystem.InventoryEntry One entry in the inventory. Hold the type of Item and how many there is in that slot. Inheritance System.Object InventorySystem.InventoryEntry Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class InventoryEntry Fields Count Declaration public int Count Field Value Type Description System.Int32 Item Declaration public Item Item Field Value Type Description Item"
  },
  "api/CreatorKitCodeInternal.AmbiencePlayer.html": {
    "href": "api/CreatorKitCodeInternal.AmbiencePlayer.html",
    "title": "Class AmbiencePlayer | SceneKit Code Documentation",
    "keywords": "Class AmbiencePlayer Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour AmbiencePlayer Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class AmbiencePlayer : MonoBehaviour Fields CloseAudioSource Declaration public AudioSource CloseAudioSource Field Value Type Description UnityEngine.AudioSource FarAudioSource Declaration public AudioSource FarAudioSource Field Value Type Description UnityEngine.AudioSource Methods UpdateVolume(Single) Declaration public static void UpdateVolume(float zoomRatio) Parameters Type Name Description System.Single zoomRatio"
  },
  "api/CreatorKitCode.VFXManager.VFXInstance.html": {
    "href": "api/CreatorKitCode.VFXManager.VFXInstance.html",
    "title": "Class VFXManager.VFXInstance | SceneKit Code Documentation",
    "keywords": "Class VFXManager.VFXInstance One instance of VFX. The Effect field is the actual GameObject of the effect you can disable once it is finished. The Index field is used by the manager to know which effect this instance is part of. Inheritance System.Object VFXManager.VFXInstance Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class VFXInstance Fields Effect Declaration public GameObject Effect Field Value Type Description UnityEngine.GameObject Index Declaration public int Index Field Value Type Description System.Int32"
  },
  "api/CreatorKitCodeInternal.AnimationControllerDispatcher.html": {
    "href": "api/CreatorKitCodeInternal.AnimationControllerDispatcher.html",
    "title": "Class AnimationControllerDispatcher | SceneKit Code Documentation",
    "keywords": "Class AnimationControllerDispatcher Need to be added to the GameObject that have the AnimatorController. This will receive the Event defined in the import of the animations and can dispatch them to some receivers. Used by step event and attack frame event on characters. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour AnimationControllerDispatcher Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class AnimationControllerDispatcher : MonoBehaviour Fields AttackFrameReceiver Declaration public MonoBehaviour AttackFrameReceiver Field Value Type Description UnityEngine.MonoBehaviour FootstepFrameReceiver Declaration public MonoBehaviour FootstepFrameReceiver Field Value Type Description UnityEngine.MonoBehaviour"
  },
  "api/CreatorKitCode.Weapon.AttackData.html": {
    "href": "api/CreatorKitCode.Weapon.AttackData.html",
    "title": "Class Weapon.AttackData | SceneKit Code Documentation",
    "keywords": "Class Weapon.AttackData This class will store damage done to a target CharacterData by a source CharacterData. The function to add damage will take care of applied all the strength/boost of the source and remove defense/resistance of the target. The source can be null when its done by an non CharacterData source (elemental effect, environment etc.) Inheritance System.Object Weapon.AttackData Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class AttackData Constructors AttackData(CharacterData, CharacterData) Build a new AttackData. All AttackData need a target, but source is optional. If source is null, the damage is assume to be from a non CharacterData source (elemental effect, environment) and no boost will be applied to damage (target defense is still taken in account). Declaration public AttackData(CharacterData target, CharacterData source = null) Parameters Type Name Description CharacterData target CharacterData source Properties Source Declaration public CharacterData Source { get; } Property Value Type Description CharacterData Target Declaration public CharacterData Target { get; } Property Value Type Description CharacterData Methods AddDamage(StatSystem.DamageType, Int32) Add an amount of damage given in the given type. The source (if non null, see class documentation for info) boost will be applied and the target defense will be removed from that amount. Declaration public int AddDamage(StatSystem.DamageType damageType, int amount) Parameters Type Name Description StatSystem.DamageType damageType The type of damage System.Int32 amount The amount of damage Returns Type Description System.Int32 GetDamage(StatSystem.DamageType) Return the current amount of damage of the given type stored in that AttackData. This is the effective amount of damage, boost and defense have already been applied. Declaration public int GetDamage(StatSystem.DamageType damageType) Parameters Type Name Description StatSystem.DamageType damageType The type of damage Returns Type Description System.Int32 How much damage of that type is stored in that AttackData GetFullDamage() Return the total amount of damage across all type stored in that AttackData. This is effective damage, that mean all boost/defense was already applied. Declaration public int GetFullDamage() Returns Type Description System.Int32 The total amount of damage across all type in that Attack Data"
  },
  "api/CreatorKitCode.LootSpawner.LootEntry.html": {
    "href": "api/CreatorKitCode.LootSpawner.LootEntry.html",
    "title": "Class LootSpawner.LootEntry | SceneKit Code Documentation",
    "keywords": "Class LootSpawner.LootEntry Inheritance System.Object LootSpawner.LootEntry Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class LootEntry Fields Item Declaration public Item Item Field Value Type Description Item Weight Declaration public int Weight Field Value Type Description System.Int32"
  },
  "api/CreatorKitCodeInternal.BreakableObject.html": {
    "href": "api/CreatorKitCodeInternal.BreakableObject.html",
    "title": "Class BreakableObject | SceneKit Code Documentation",
    "keywords": "Class BreakableObject Small class that will handle replacing a GameObject with another when the CharacterData on the same GameObject reach health = 0. Used in game for barrels, swapping a normal model for a prefab made of multiple part with physics to simulate the barrel breaking. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BreakableObject Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax [RequireComponent(typeof(CharacterData))] public class BreakableObject : MonoBehaviour Fields BreakingAudioClip Declaration public AudioClip BreakingAudioClip Field Value Type Description UnityEngine.AudioClip DestroyedChild Declaration public GameObject DestroyedChild Field Value Type Description UnityEngine.GameObject"
  },
  "api/CreatorKitCodeInternal.ResourceManager.html": {
    "href": "api/CreatorKitCodeInternal.ResourceManager.html",
    "title": "Class ResourceManager | SceneKit Code Documentation",
    "keywords": "Class ResourceManager Use this class to list common resources used by systems, so you can define them in a single place (at the time of writing, only used to store the billboard material used by the Loot system) Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ResourceManager Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class ResourceManager : MonoBehaviour Properties BillboardMaterial Declaration public Material BillboardMaterial { get; } Property Value Type Description UnityEngine.Material Instance Declaration public static ResourceManager Instance { get; } Property Value Type Description ResourceManager"
  },
  "api/CreatorKitCode.Item.html": {
    "href": "api/CreatorKitCode.Item.html",
    "title": "Class Item | SceneKit Code Documentation",
    "keywords": "Class Item Base clase of all items in the game. This is an abstract class and need to be inherited to specify behaviour. The project offer 3 type of items : UsableItem, Equipment and Weapon Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject Item EquipmentItem UsableItem Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public abstract class Item : ScriptableObject Fields Description Declaration public string Description Field Value Type Description System.String ItemName Declaration public string ItemName Field Value Type Description System.String ItemSprite Declaration public Sprite ItemSprite Field Value Type Description UnityEngine.Sprite WorldObjectPrefab Declaration public GameObject WorldObjectPrefab Field Value Type Description UnityEngine.GameObject Methods GetDescription() Declaration public virtual string GetDescription() Returns Type Description System.String UsedBy(CharacterData) Called by the inventory system when the object is \"used\" (double clicked) Declaration public virtual bool UsedBy(CharacterData user) Parameters Type Name Description CharacterData user The CharacterDate that used that item Returns Type Description System.Boolean If it was actually used (allow the inventory to know if it can remove the object or not)"
  },
  "api/CreatorKitCode.BaseElementalEffect.html": {
    "href": "api/CreatorKitCode.BaseElementalEffect.html",
    "title": "Class BaseElementalEffect | SceneKit Code Documentation",
    "keywords": "Class BaseElementalEffect The base class to derive from to write you own custom Elemental effect that can be added to a StatsSystem. There is a default implementation called ElementalEffect that can be used to make Physical/Fire/Electrical/Cold damage across time. A derived class must implement the Equals function so we can check if 2 effects are the same (e.g. the default implementation ElementalEffect will consider 2 effect equal if they do the same DamageType). Inheritance System.Object BaseElementalEffect ElementalEffect Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public abstract class BaseElementalEffect : IEquatable<BaseElementalEffect> Constructors BaseElementalEffect(Single) Declaration public BaseElementalEffect(float duration) Parameters Type Name Description System.Single duration Fields m_Duration Declaration protected float m_Duration Field Value Type Description System.Single m_Target Declaration protected CharacterData m_Target Field Value Type Description CharacterData m_Timer Declaration protected float m_Timer Field Value Type Description System.Single Properties CurrentTime Declaration public float CurrentTime { get; } Property Value Type Description System.Single Done Declaration public bool Done { get; } Property Value Type Description System.Boolean Duration Declaration public float Duration { get; } Property Value Type Description System.Single Methods Applied(CharacterData) Declaration public virtual void Applied(CharacterData target) Parameters Type Name Description CharacterData target Equals(BaseElementalEffect) Declaration public abstract bool Equals(BaseElementalEffect other) Parameters Type Name Description BaseElementalEffect other Returns Type Description System.Boolean Removed() Declaration public virtual void Removed() Update(StatSystem) Declaration public virtual void Update(StatSystem statSystem) Parameters Type Name Description StatSystem statSystem"
  },
  "api/CreatorKitCodeInternal.UISystem.html": {
    "href": "api/CreatorKitCodeInternal.UISystem.html",
    "title": "Class UISystem | SceneKit Code Documentation",
    "keywords": "Class UISystem Main class that handle the Game UI (health, open/close inventory) Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UISystem Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class UISystem : MonoBehaviour Fields CloseInventoryClip Declaration public AudioClip CloseInventoryClip Field Value Type Description UnityEngine.AudioClip CurrentHealth Declaration public Text CurrentHealth Field Value Type Description UnityEngine.UI.Text EnemyEffectIcones Declaration public EffectIconUI[] EnemyEffectIcones Field Value Type Description EffectIconUI [] EnemyHealthSlider Declaration [Header(\"Enemy\")] public Slider EnemyHealthSlider Field Value Type Description UnityEngine.UI.Slider EnemyName Declaration public Text EnemyName Field Value Type Description UnityEngine.UI.Text InventoryWindow Declaration [Header(\"Inventory\")] public InventoryUI InventoryWindow Field Value Type Description InventoryUI MaxHealth Declaration public Text MaxHealth Field Value Type Description UnityEngine.UI.Text OpenInventoryButton Declaration public Button OpenInventoryButton Field Value Type Description UnityEngine.UI.Button OpenInventoryClip Declaration public AudioClip OpenInventoryClip Field Value Type Description UnityEngine.AudioClip PlayerCharacter Declaration [Header(\"Player\")] public CharacterControl PlayerCharacter Field Value Type Description CharacterControl PlayerHealthSlider Declaration public Slider PlayerHealthSlider Field Value Type Description UnityEngine.UI.Slider StatsText Declaration public Text StatsText Field Value Type Description UnityEngine.UI.Text TimedModifierIcones Declaration public EffectIconUI[] TimedModifierIcones Field Value Type Description EffectIconUI [] Properties Instance Declaration public static UISystem Instance { get; } Property Value Type Description UISystem Methods ToggleInventory() Declaration public void ToggleInventory()"
  },
  "api/CreatorKitCodeInternal.UIAlphaRaycast.html": {
    "href": "api/CreatorKitCodeInternal.UIAlphaRaycast.html",
    "title": "Class UIAlphaRaycast | SceneKit Code Documentation",
    "keywords": "Class UIAlphaRaycast Allow to define the alpha threshold that will let a raycast pass in the UI. By default for performance reason that threshold is set to 0 (all part of the image, even the one with = 0, stop the raycast). Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIAlphaRaycast Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax [RequireComponent(typeof(Image))] public class UIAlphaRaycast : MonoBehaviour Fields AlphaLimit Declaration [Range(0F, 1F)] public float AlphaLimit Field Value Type Description System.Single"
  },
  "api/CreatorKitCodeInternal.ItemTooltip.html": {
    "href": "api/CreatorKitCodeInternal.ItemTooltip.html",
    "title": "Class ItemTooltip | SceneKit Code Documentation",
    "keywords": "Class ItemTooltip Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ItemTooltip Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class ItemTooltip : MonoBehaviour Fields DescriptionText Declaration public Text DescriptionText Field Value Type Description UnityEngine.UI.Text Name Declaration public Text Name Field Value Type Description UnityEngine.UI.Text Methods UpdatePosition() Declaration public void UpdatePosition()"
  },
  "api/CreatorKitCodeInternal.CharacterAudio.html": {
    "href": "api/CreatorKitCodeInternal.CharacterAudio.html",
    "title": "Class CharacterAudio | SceneKit Code Documentation",
    "keywords": "Class CharacterAudio Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour CharacterAudio Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class CharacterAudio : MonoBehaviour Fields DeathClips Declaration public AudioClip[] DeathClips Field Value Type Description UnityEngine.AudioClip [] FootstepClips Declaration public AudioClip[] FootstepClips Field Value Type Description UnityEngine.AudioClip [] UseType Declaration public SFXManager.Use UseType Field Value Type Description SFXManager.Use VocalAttack Declaration public AudioClip[] VocalAttack Field Value Type Description UnityEngine.AudioClip [] VocalHit Declaration public AudioClip[] VocalHit Field Value Type Description UnityEngine.AudioClip [] Methods Attack(Vector3) Declaration public void Attack(Vector3 position) Parameters Type Name Description UnityEngine.Vector3 position Death(Vector3) Declaration public void Death(Vector3 position) Parameters Type Name Description UnityEngine.Vector3 position Hit(Vector3) Declaration public void Hit(Vector3 position) Parameters Type Name Description UnityEngine.Vector3 position Step(Vector3) Declaration public void Step(Vector3 position) Parameters Type Name Description UnityEngine.Vector3 position"
  },
  "api/CreatorKitCode.InventorySystem.html": {
    "href": "api/CreatorKitCode.InventorySystem.html",
    "title": "Class InventorySystem | SceneKit Code Documentation",
    "keywords": "Class InventorySystem This handles the inventory of our character. The inventory has a maximum of 32 slot, each slot can hold one TYPE of object, but those can be stacked without limit (e.g. 1 slot used by health potions, but contains 20 health potions) Inheritance System.Object InventorySystem Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class InventorySystem Fields Entries Declaration public InventorySystem.InventoryEntry[] Entries Field Value Type Description InventorySystem.InventoryEntry [] Methods AddItem(Item) Add an item to the inventory. This will look if this item already exist in one of the slot and increment the stack counter there instead of using another slot. Declaration public void AddItem(Item item) Parameters Type Name Description Item item The item to add to the inventory Init(CharacterData) Declaration public void Init(CharacterData owner) Parameters Type Name Description CharacterData owner UseItem(InventorySystem.InventoryEntry) This will try to use the item. If the item return true when used, this will decrement the stack count and if the stack count reach 0 this will free the slot. If it return false, it will just ignore that call. (e.g. a potion will return false if the user is at full health, not consuming the potion in that case) Declaration public bool UseItem(InventorySystem.InventoryEntry item) Parameters Type Name Description InventorySystem.InventoryEntry item Returns Type Description System.Boolean"
  },
  "api/CreatorKitCode.Weapon.html": {
    "href": "api/CreatorKitCode.Weapon.html",
    "title": "Class Weapon | SceneKit Code Documentation",
    "keywords": "Class Weapon Special case of EquipmentItem for weapon, as they have a whole attack system in addition. Like Equipment they can have minimum stats and equipped effect, but also have a list of WeaponAttackEffect that will have their OnAttack function called during a hit, and their OnPostAttack function called after all OnAttack of all effects are called. Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject Item EquipmentItem Weapon Inherited Members EquipmentItem.Slot EquipmentItem.MinimumStrength EquipmentItem.MinimumAgility EquipmentItem.MinimumDefense EquipmentItem.EquippedEffects EquipmentItem.UsedBy(CharacterData) EquipmentItem.EquippedBy(CharacterData) EquipmentItem.UnequippedBy(CharacterData) Item.ItemName Item.ItemSprite Item.Description Item.WorldObjectPrefab Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class Weapon : EquipmentItem Fields AttackEffects Declaration public List<Weapon.WeaponAttackEffect> AttackEffects Field Value Type Description System.Collections.Generic.List < Weapon.WeaponAttackEffect > HitSounds Declaration [Header(\"Sounds\")] public AudioClip[] HitSounds Field Value Type Description UnityEngine.AudioClip [] Stats Declaration [Header(\"Stats\")] public Weapon.Stat Stats Field Value Type Description Weapon.Stat SwingSounds Declaration public AudioClip[] SwingSounds Field Value Type Description UnityEngine.AudioClip [] Methods Attack(CharacterData, CharacterData) Declaration public void Attack(CharacterData attacker, CharacterData target) Parameters Type Name Description CharacterData attacker CharacterData target CanHit(CharacterData, CharacterData) Declaration public bool CanHit(CharacterData attacker, CharacterData target) Parameters Type Name Description CharacterData attacker CharacterData target Returns Type Description System.Boolean GetDescription() Declaration public override string GetDescription() Returns Type Description System.String Overrides EquipmentItem.GetDescription() GetHitSound() Declaration public AudioClip GetHitSound() Returns Type Description UnityEngine.AudioClip GetSwingSound() Declaration public AudioClip GetSwingSound() Returns Type Description UnityEngine.AudioClip"
  },
  "api/CreatorKitCode.StatSystem.TimedStatModifier.html": {
    "href": "api/CreatorKitCode.StatSystem.TimedStatModifier.html",
    "title": "Class StatSystem.TimedStatModifier | SceneKit Code Documentation",
    "keywords": "Class StatSystem.TimedStatModifier This is a special StatModifier, that gets added to the TimedStatModifier stack, that will be automatically removed when its timer reaches 0. Contains a StatModifier that controls the actual modification. Inheritance System.Object StatSystem.TimedStatModifier Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class TimedStatModifier Fields Duration Declaration public float Duration Field Value Type Description System.Single EffectSprite Declaration public Sprite EffectSprite Field Value Type Description UnityEngine.Sprite Id Declaration public string Id Field Value Type Description System.String Modifier Declaration public StatSystem.StatModifier Modifier Field Value Type Description StatSystem.StatModifier Timer Declaration public float Timer Field Value Type Description System.Single Methods Reset() Declaration public void Reset()"
  },
  "api/CreatorKitCode.SFXManager.Use.html": {
    "href": "api/CreatorKitCode.SFXManager.Use.html",
    "title": "Enum SFXManager.Use | SceneKit Code Documentation",
    "keywords": "Enum SFXManager.Use Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public enum Use Fields Name Description Enemies Player Sound2D WorldSound"
  },
  "api/CreatorKitCode.UsableItem.html": {
    "href": "api/CreatorKitCode.UsableItem.html",
    "title": "Class UsableItem | SceneKit Code Documentation",
    "keywords": "Class UsableItem Describe an usable item. A usable item is an item that can be used in the inventory by double clicking on it. When it is used, all the stored UsageEffects will be run, allowing to specify what that item does. (e.g. a AddHealth effect will give health point back to the user) Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject Item UsableItem Inherited Members Item.ItemName Item.ItemSprite Item.Description Item.WorldObjectPrefab Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [CreateAssetMenu(fileName = \"UsableItem\", menuName = \"Beginner Code/Usable Item\", order = -999)] public class UsableItem : Item Fields UsageEffects Declaration public List<UsableItem.UsageEffect> UsageEffects Field Value Type Description System.Collections.Generic.List < UsableItem.UsageEffect > Methods GetDescription() Declaration public override string GetDescription() Returns Type Description System.String Overrides Item.GetDescription() UsedBy(CharacterData) Declaration public override bool UsedBy(CharacterData user) Parameters Type Name Description CharacterData user Returns Type Description System.Boolean Overrides Item.UsedBy(CharacterData)"
  },
  "api/CreatorKitCode.LootSpawner.html": {
    "href": "api/CreatorKitCode.LootSpawner.html",
    "title": "Class LootSpawner | SceneKit Code Documentation",
    "keywords": "Class LootSpawner This class handle creating loot. It got a list of events and each events have a list of items with associated weight. When the spawn is triggered through the SpawnLoot function, it will spawn one item per events, with the item being picked randomly per event Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LootSpawner Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class LootSpawner : MonoBehaviour Fields Events Declaration public LootSpawner.SpawnEvent[] Events Field Value Type Description LootSpawner.SpawnEvent [] SpawnedClip Declaration public AudioClip SpawnedClip Field Value Type Description UnityEngine.AudioClip Methods SpawnLoot() Call this to trigger the spawning of the loot. Will spawn one item per event, picking the item randomly per event using the defined weight. Every call will pick randomly again (but most of the time, the caller will destroy the LootSpawner too as you spawn loot from something only once) Declaration public void SpawnLoot()"
  },
  "api/CreatorKitCode.CharacterData.html": {
    "href": "api/CreatorKitCode.CharacterData.html",
    "title": "Class CharacterData | SceneKit Code Documentation",
    "keywords": "Class CharacterData This defines a character in the game. The name Character is used in a loose sense, it just means something that can be attacked and have some stats including health. It could also be an inanimate object like a breakable box. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour HighlightableObject CharacterData Inherited Members HighlightableObject.m_Renderers HighlightableObject.Start() HighlightableObject.Highlight() HighlightableObject.Dehighlight() Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class CharacterData : HighlightableObject Fields CharacterName Declaration public string CharacterName Field Value Type Description System.String Equipment Declaration public EquipmentSystem Equipment Field Value Type Description EquipmentSystem HitClip Declaration public AudioClip[] HitClip Field Value Type Description UnityEngine.AudioClip [] Inventory Declaration public InventorySystem Inventory Field Value Type Description InventorySystem StartingWeapon The starting weapon equipped when the Character is created. Set through the Unity Editor. Declaration public Weapon StartingWeapon Field Value Type Description Weapon Stats Declaration public StatSystem Stats Field Value Type Description StatSystem Properties CanAttack Will return true if the attack cooldown have reached 0. False otherwise. Declaration public bool CanAttack { get; } Property Value Type Description System.Boolean OnDamage Callback for when that CharacterData receive damage. E.g. used by the player character to trigger the right animation Declaration public Action OnDamage { get; set; } Property Value Type Description System.Action Methods Attack(CharacterData) Attack the given target. NOTE : this WON'T check if the target CAN be attacked, you should make sure before with the CanAttackTarget function. Declaration public void Attack(CharacterData target) Parameters Type Name Description CharacterData target The CharacterData you want to attack AttackTriggered() This need to be called as soon as an attack is triggered, it will start the cooldown. This is separate from the actual Attack function as AttackTriggered will be called at the beginning of the animation while the Attack function (doing the actual attack and damage) will be called by an animation event to match the animation Declaration public void AttackTriggered() CanAttackReach(CharacterData) Will check if that CharacterData can reach the given target with its currently equipped weapon. Will rarely be called, as the function CanAttackTarget will call this AND also check if the cooldown is finished. Declaration public bool CanAttackReach(CharacterData target) Parameters Type Name Description CharacterData target The CharacterData you want to reach Returns Type Description System.Boolean True if you can reach the target, False otherwise CanAttackTarget(CharacterData) Will check if the target is attackable. This in effect check : If the target is in range of the weapon If this character attack cooldown is finished If the target isn't already dead Declaration public bool CanAttackTarget(CharacterData target) Parameters Type Name Description CharacterData target The CharacterData you want to reach Returns Type Description System.Boolean True if the target can be attacked, false if any of the condition isn't met Damage(Weapon.AttackData) Damage the Character by the AttackData given as parameter. See the documentation for that class for how to add damage to that attackData. (this will be done automatically by weapons, but you may need to fill it manually when writing special elemental effect) Declaration public void Damage(Weapon.AttackData attackData) Parameters Type Name Description Weapon.AttackData attackData Death() Call when the character die (health reach 0). Declaration public void Death() Init() Declaration public void Init()"
  },
  "api/CreatorKitCodeInternal.SimpleEnemyController.html": {
    "href": "api/CreatorKitCodeInternal.SimpleEnemyController.html",
    "title": "Class SimpleEnemyController | SceneKit Code Documentation",
    "keywords": "Class SimpleEnemyController Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SimpleEnemyController Implements AnimationControllerDispatcher.IAttackFrameReceiver AnimationControllerDispatcher.IFootstepFrameReceiver Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class SimpleEnemyController : MonoBehaviour, AnimationControllerDispatcher.IAttackFrameReceiver, AnimationControllerDispatcher.IFootstepFrameReceiver Fields detectionRadius Declaration public float detectionRadius Field Value Type Description System.Single Speed Declaration public float Speed Field Value Type Description System.Single SpottedAudioClip Declaration public AudioClip[] SpottedAudioClip Field Value Type Description UnityEngine.AudioClip [] Methods AttackFrame() Declaration public void AttackFrame() FootstepFrame() Declaration public void FootstepFrame() Implements AnimationControllerDispatcher.IAttackFrameReceiver AnimationControllerDispatcher.IFootstepFrameReceiver"
  },
  "api/CreatorKitCode.StatSystem.html": {
    "href": "api/CreatorKitCode.StatSystem.html",
    "title": "Class StatSystem | SceneKit Code Documentation",
    "keywords": "Class StatSystem Handles the stats of a CharacterData. It stores the health and strength/agility/defense stats. This class contains various functions for interacting with stats, by adding stat modifications, elemental effects or damage. Inheritance System.Object StatSystem Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class StatSystem Fields baseStats Declaration public StatSystem.Stats baseStats Field Value Type Description StatSystem.Stats Properties CurrentHealth Declaration public int CurrentHealth { get; } Property Value Type Description System.Int32 ElementalEffects Declaration public List<BaseElementalEffect> ElementalEffects { get; } Property Value Type Description System.Collections.Generic.List < BaseElementalEffect > stats Declaration public StatSystem.Stats stats { get; set; } Property Value Type Description StatSystem.Stats TimedModifierStack Declaration public List<StatSystem.TimedStatModifier> TimedModifierStack { get; } Property Value Type Description System.Collections.Generic.List < StatSystem.TimedStatModifier > Methods AddElementalEffect(BaseElementalEffect) Add an elemental effect to the StatSystem. Elemental Effect does not stack, adding the same type (the Equals return true) will instead replace the old one with the new one. Declaration public void AddElementalEffect(BaseElementalEffect effect) Parameters Type Name Description BaseElementalEffect effect AddModifier(StatSystem.StatModifier) Add a modifier to the end of the stack. This will recompute the Stats so it now include the new modifier. Declaration public void AddModifier(StatSystem.StatModifier modifier) Parameters Type Name Description StatSystem.StatModifier modifier AddTimedModifier(StatSystem.StatModifier, Single, String, Sprite) Add a Timed modifier. Timed modifier does not stack and instead re-adding the same type of modifier will just reset the already existing one timer to the given duration. That the use of the id parameter : it need to be shared by all timed effect that are the \"same type\". i.e. an effect that add strength can use \"StrengthTimed\" as id, so if 2 object try to add that effect, they won't stack but instead just refresh the timer. Declaration public void AddTimedModifier(StatSystem.StatModifier modifier, float duration, string id, Sprite sprite) Parameters Type Name Description StatSystem.StatModifier modifier A StatModifier container the wanted modification System.Single duration The time during which that modification will be active. System.String id A name that identify that type of modification. Adding a timed modification with an id that already exist reset the timer instead of adding a new one to the stack UnityEngine.Sprite sprite The sprite used to display the time modification above the player UI ChangeHealth(Int32) Change the health by the given amount : negative amount damage, positive amount heal. The function will take care of clamping the value in the range [0...MaxHealth] Declaration public void ChangeHealth(int amount) Parameters Type Name Description System.Int32 amount Damage(Weapon.AttackData) Will damage (change negatively health) of the amount of damage stored in the attackData. If the damage are negative, this heal instead. This will also notify the DamageUI so a damage number is displayed. Declaration public void Damage(Weapon.AttackData attackData) Parameters Type Name Description Weapon.AttackData attackData Death() Declaration public void Death() Init(CharacterData) Declaration public void Init(CharacterData owner) Parameters Type Name Description CharacterData owner RemoveModifier(StatSystem.StatModifier) Remove a modifier from the stack. This modifier need to already be on the stack. e.g. used by the equipment effect that store the modifier they add on equip and remove it when unequipped. Declaration public void RemoveModifier(StatSystem.StatModifier modifier) Parameters Type Name Description StatSystem.StatModifier modifier Tick() Declaration public void Tick()"
  },
  "api/CreatorKitCode.EquipmentItem.EquipmentSlot.html": {
    "href": "api/CreatorKitCode.EquipmentItem.EquipmentSlot.html",
    "title": "Enum EquipmentItem.EquipmentSlot | SceneKit Code Documentation",
    "keywords": "Enum EquipmentItem.EquipmentSlot Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public enum EquipmentSlot Fields Name Description Accessory Feet Head Legs Torso"
  },
  "api/CreatorKitCodeInternal.RandomLoopOffset.html": {
    "href": "api/CreatorKitCodeInternal.RandomLoopOffset.html",
    "title": "Class RandomLoopOffset | SceneKit Code Documentation",
    "keywords": "Class RandomLoopOffset Will pick a random time in an animation loop to offset an animator, allowing to avoid lots of object playing the same animation loop to look synchronised Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour RandomLoopOffset Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax [RequireComponent(typeof(Animator))] public class RandomLoopOffset : MonoBehaviour"
  },
  "api/CreatorKitCodeInternal.EquipmentUI.html": {
    "href": "api/CreatorKitCodeInternal.EquipmentUI.html",
    "title": "Class EquipmentUI | SceneKit Code Documentation",
    "keywords": "Class EquipmentUI Keep reference and update the Equipment entry (the 6 icons around the character in the Inventory) Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EquipmentUI Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class EquipmentUI : MonoBehaviour Fields AccessorySlot Declaration public ItemEntryUI AccessorySlot Field Value Type Description ItemEntryUI FeetSlot Declaration public ItemEntryUI FeetSlot Field Value Type Description ItemEntryUI HeadSlot Declaration public ItemEntryUI HeadSlot Field Value Type Description ItemEntryUI LegsSlot Declaration public ItemEntryUI LegsSlot Field Value Type Description ItemEntryUI TorsoSlot Declaration public ItemEntryUI TorsoSlot Field Value Type Description ItemEntryUI WeaponSlot Declaration public ItemEntryUI WeaponSlot Field Value Type Description ItemEntryUI Methods Init(InventoryUI) Declaration public void Init(InventoryUI owner) Parameters Type Name Description InventoryUI owner UpdateEquipment(EquipmentSystem, StatSystem) Declaration public void UpdateEquipment(EquipmentSystem equipment, StatSystem system) Parameters Type Name Description EquipmentSystem equipment StatSystem system"
  },
  "api/CreatorKitCodeInternal.AttackState.html": {
    "href": "api/CreatorKitCodeInternal.AttackState.html",
    "title": "Class AttackState | SceneKit Code Documentation",
    "keywords": "Class AttackState Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UnityEngine.StateMachineBehaviour SealedSMB SceneLinkedSMB < CharacterData > AttackState Inherited Members SceneLinkedSMB<CharacterData>.m_MonoBehaviour SceneLinkedSMB<CharacterData>.Initialise(Animator, CharacterData) SceneLinkedSMB<CharacterData>.InternalInitialise(Animator, CharacterData) SceneLinkedSMB<CharacterData>.OnStateEnter(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnStateUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnStateExit(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLTransitionToStateUpdate(Animator, AnimatorStateInfo, Int32) SceneLinkedSMB<CharacterData>.OnSLStatePostEnter(Animator, AnimatorStateInfo, Int32) SceneLinkedSMB<CharacterData>.OnSLStateNoTransitionUpdate(Animator, AnimatorStateInfo, Int32) SceneLinkedSMB<CharacterData>.OnSLStatePreExit(Animator, AnimatorStateInfo, Int32) SceneLinkedSMB<CharacterData>.OnSLTransitionFromStateUpdate(Animator, AnimatorStateInfo, Int32) SceneLinkedSMB<CharacterData>.OnSLStateExit(Animator, AnimatorStateInfo, Int32) SceneLinkedSMB<CharacterData>.OnSLStateEnter(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLTransitionToStateUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLStatePostEnter(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLStateNoTransitionUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLStatePreExit(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLTransitionFromStateUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SceneLinkedSMB<CharacterData>.OnSLStateExit(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) SealedSMB.OnStateEnter(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) SealedSMB.OnStateUpdate(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) SealedSMB.OnStateExit(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class AttackState : SceneLinkedSMB<CharacterData> Methods OnSLStateEnter(Animator, AnimatorStateInfo, Int32) Declaration public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex Overrides CreatorKitCodeInternal.SceneLinkedSMB<CreatorKitCode.CharacterData>.OnSLStateEnter(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) OnStart(Animator) Declaration public override void OnStart(Animator animator) Parameters Type Name Description UnityEngine.Animator animator Overrides CreatorKitCodeInternal.SceneLinkedSMB<CreatorKitCode.CharacterData>.OnStart(UnityEngine.Animator)"
  },
  "api/CreatorKitCode.Weapon.WeaponAttackEffect.html": {
    "href": "api/CreatorKitCode.Weapon.WeaponAttackEffect.html",
    "title": "Class Weapon.WeaponAttackEffect | SceneKit Code Documentation",
    "keywords": "Class Weapon.WeaponAttackEffect Base class of all effect you can add on a weapon to specialize it. See documentation on How to write a new Weapon Effect. Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject Weapon.WeaponAttackEffect Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public abstract class WeaponAttackEffect : ScriptableObject Fields Description Declaration public string Description Field Value Type Description System.String Methods GetDescription() Declaration public virtual string GetDescription() Returns Type Description System.String OnAttack(CharacterData, CharacterData, ref Weapon.AttackData) Declaration public virtual void OnAttack(CharacterData target, CharacterData user, ref Weapon.AttackData data) Parameters Type Name Description CharacterData target CharacterData user Weapon.AttackData data OnPostAttack(CharacterData, CharacterData, Weapon.AttackData) Declaration public virtual void OnPostAttack(CharacterData target, CharacterData user, Weapon.AttackData data) Parameters Type Name Description CharacterData target CharacterData user Weapon.AttackData data"
  },
  "api/CreatorKitCode.SpawnPoint.html": {
    "href": "api/CreatorKitCode.SpawnPoint.html",
    "title": "Class SpawnPoint | SceneKit Code Documentation",
    "keywords": "Class SpawnPoint When the player walks through the trigger on the same GameObject as this script, the GameObject position becomes the new place where the player will respawn when their health reaches 0. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SpawnPoint Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class SpawnPoint : MonoBehaviour Methods Activated() Declaration public void Activated() Deactivated() Declaration public void Deactivated()"
  },
  "api/CreatorKitCode.Loot.html": {
    "href": "api/CreatorKitCode.Loot.html",
    "title": "Class Loot | SceneKit Code Documentation",
    "keywords": "Class Loot Describes an InteractableObject that can be picked up and grants a specific item when interacted with. It will also play a small animation (object going in an arc from spawn point to a random point around) when the object is actually \"spawned\", and the object becomes interactable only when that animation is finished. Finally it will notify the LootUI that a new loot is available in the world so the UI displays the name. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour HighlightableObject InteractableObject Loot Inherited Members HighlightableObject.m_Renderers HighlightableObject.Highlight() HighlightableObject.Dehighlight() Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class Loot : InteractableObject Fields Item Declaration public Item Item Field Value Type Description Item Properties IsInteractable Declaration public override bool IsInteractable { get; } Property Value Type Description System.Boolean Overrides InteractableObject.IsInteractable Methods InteractWith(CharacterData) Declaration public override void InteractWith(CharacterData target) Parameters Type Name Description CharacterData target Overrides InteractableObject.InteractWith(CharacterData) Spawn(Vector3) This is called when the loot become available. It will setup to play the small spawn animation. This is rarely called manually, and mostly called by the LootSpawner class. Declaration public void Spawn(Vector3 position) Parameters Type Name Description UnityEngine.Vector3 position Start() Declaration protected override void Start() Overrides HighlightableObject.Start()"
  },
  "api/CreatorKitCode.StatSystem.Stats.html": {
    "href": "api/CreatorKitCode.StatSystem.Stats.html",
    "title": "Class StatSystem.Stats | SceneKit Code Documentation",
    "keywords": "Class StatSystem.Stats Store the stats, which are composed of 4 values : health, strength, agility and defense. It also contains elemental protections and boost (1 for each elements defined by the DamageType enum) Inheritance System.Object StatSystem.Stats Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public class Stats Fields agility Declaration public int agility Field Value Type Description System.Int32 defense Declaration public int defense Field Value Type Description System.Int32 elementalBoosts Declaration public int[] elementalBoosts Field Value Type Description System.Int32 [] elementalProtection Declaration public int[] elementalProtection Field Value Type Description System.Int32 [] health Declaration public int health Field Value Type Description System.Int32 strength Declaration public int strength Field Value Type Description System.Int32 Methods Copy(StatSystem.Stats) Declaration public void Copy(StatSystem.Stats other) Parameters Type Name Description StatSystem.Stats other Modify(StatSystem.StatModifier) Will modify that Stat by the given StatModifier (see StatModifier documentation for how to use them) Declaration public void Modify(StatSystem.StatModifier modifier) Parameters Type Name Description StatSystem.StatModifier modifier"
  },
  "api/CreatorKitCode.SFXManager.html": {
    "href": "api/CreatorKitCode.SFXManager.html",
    "title": "Class SFXManager | SceneKit Code Documentation",
    "keywords": "Class SFXManager Class that handle all the SFX. Through its functions you can play a SFX of a given type at a given position. It use pooling to pre-create all the source and recycle them for efficiency reason. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SFXManager Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class SFXManager : MonoBehaviour Fields DefaultHitSound Declaration public AudioClip[] DefaultHitSound Field Value Type Description UnityEngine.AudioClip [] DefaultItemEquipedSound Declaration public AudioClip DefaultItemEquipedSound Field Value Type Description UnityEngine.AudioClip DefaultItemUsedSound Declaration public AudioClip DefaultItemUsedSound Field Value Type Description UnityEngine.AudioClip DefaultPickupSound Declaration public AudioClip DefaultPickupSound Field Value Type Description UnityEngine.AudioClip DefaultSwingSound Declaration [Header(\"Defaults\")] public AudioClip[] DefaultSwingSound Field Value Type Description UnityEngine.AudioClip [] Listener Declaration public AudioListener Listener Field Value Type Description UnityEngine.AudioListener ListenerTarget Declaration public Transform ListenerTarget Field Value Type Description UnityEngine.Transform Properties ItemEquippedSound Declaration public static AudioClip ItemEquippedSound { get; } Property Value Type Description UnityEngine.AudioClip ItemUsedSound Declaration public static AudioClip ItemUsedSound { get; } Property Value Type Description UnityEngine.AudioClip PickupSound Declaration public static AudioClip PickupSound { get; } Property Value Type Description UnityEngine.AudioClip Methods GetDefaultHit() Declaration public static AudioClip GetDefaultHit() Returns Type Description UnityEngine.AudioClip GetDefaultSwingSound() Declaration public static AudioClip GetDefaultSwingSound() Returns Type Description UnityEngine.AudioClip GetSource(SFXManager.Use) Get a source of the given type. You will rarely call this directly and instead use PlaySound. Declaration public static AudioSource GetSource(SFXManager.Use useType) Parameters Type Name Description SFXManager.Use useType The type of sound (map to a specific mixer) Returns Type Description UnityEngine.AudioSource The AudioSource at the front of the current pool queue for the given type PlaySound(SFXManager.Use, SFXManager.PlayData) Play a sound of the given type using the info in the given PlayData. This will take care of retrieving an AudioSource of the given type Declaration public static void PlaySound(SFXManager.Use useType, SFXManager.PlayData data) Parameters Type Name Description SFXManager.Use useType The type of sound (map to a specific mixer) SFXManager.PlayData data The PlayData that contains all the data of the sound to play (clip, volume, position etc.)"
  },
  "api/CreatorKitCodeInternal.RandomBGMPlayer.html": {
    "href": "api/CreatorKitCodeInternal.RandomBGMPlayer.html",
    "title": "Class RandomBGMPlayer | SceneKit Code Documentation",
    "keywords": "Class RandomBGMPlayer Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour RandomBGMPlayer Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class RandomBGMPlayer : MonoBehaviour Fields clips Declaration public AudioClip[] clips Field Value Type Description UnityEngine.AudioClip []"
  },
  "api/CreatorKitCodeInternal.DamageUI.html": {
    "href": "api/CreatorKitCodeInternal.DamageUI.html",
    "title": "Class DamageUI | SceneKit Code Documentation",
    "keywords": "Class DamageUI Handle all the UI related to damage number appearing above object/character when they get damaged. Manage the pool of UI text and activating, placing and fading them out across time. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour DamageUI Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class DamageUI : MonoBehaviour Fields DamageTextPrefab Declaration public Text DamageTextPrefab Field Value Type Description UnityEngine.UI.Text Properties Instance Declaration public static DamageUI Instance { get; } Property Value Type Description DamageUI Methods NewDamage(Int32, Vector3) Called by the CharacterData system when a new damage is made. This will take care of grabbing a text from the pool and place it properly, then register it as an active text so its position and opacity is updated by the system. Declaration public void NewDamage(int amount, Vector3 worldPos) Parameters Type Name Description System.Int32 amount The amount of damage to display UnityEngine.Vector3 worldPos The position is the world where the damage text should appear (e.g. character head)"
  },
  "api/CreatorKitCode.StatSystem.DamageType.html": {
    "href": "api/CreatorKitCode.StatSystem.DamageType.html",
    "title": "Enum StatSystem.DamageType | SceneKit Code Documentation",
    "keywords": "Enum StatSystem.DamageType The type of damage that exist, each will have their own boost/protection in stats, only the main, Physical, is influence by strength and defense stats. Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public enum DamageType Fields Name Description Cold Electric Fire Physical"
  },
  "api/CreatorKitCodeInternal.InventoryCharacterRender.html": {
    "href": "api/CreatorKitCodeInternal.InventoryCharacterRender.html",
    "title": "Class InventoryCharacterRender | SceneKit Code Documentation",
    "keywords": "Class InventoryCharacterRender Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour InventoryCharacterRender Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class InventoryCharacterRender : MonoBehaviour Fields RootToRender Declaration public GameObject RootToRender Field Value Type Description UnityEngine.GameObject TargetImage Declaration public RawImage TargetImage Field Value Type Description UnityEngine.UI.RawImage"
  },
  "api/CreatorKitCode.StatSystem.StatModifier.Mode.html": {
    "href": "api/CreatorKitCode.StatSystem.StatModifier.Mode.html",
    "title": "Enum StatSystem.StatModifier.Mode | SceneKit Code Documentation",
    "keywords": "Enum StatSystem.StatModifier.Mode The mode of the modifier : Percentage will divide the value by 100 to get a percentage, absolute use the value as is. Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public enum Mode Fields Name Description Absolute Percentage"
  },
  "api/CreatorKitCode.EquipmentItem.EquippedEffect.html": {
    "href": "api/CreatorKitCode.EquipmentItem.EquippedEffect.html",
    "title": "Class EquipmentItem.EquippedEffect | SceneKit Code Documentation",
    "keywords": "Class EquipmentItem.EquippedEffect Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject EquipmentItem.EquippedEffect Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public abstract class EquippedEffect : ScriptableObject Fields Description Declaration public string Description Field Value Type Description System.String Methods Equipped(CharacterData) Declaration public abstract void Equipped(CharacterData user) Parameters Type Name Description CharacterData user GetDescription() Declaration public virtual string GetDescription() Returns Type Description System.String Removed(CharacterData) Declaration public abstract void Removed(CharacterData user) Parameters Type Name Description CharacterData user"
  },
  "api/CreatorKitCodeInternal.html": {
    "href": "api/CreatorKitCodeInternal.html",
    "title": "Namespace CreatorKitCodeInternal | SceneKit Code Documentation",
    "keywords": "Namespace CreatorKitCodeInternal Classes AmbiencePlayer AnimationControllerDispatcher Need to be added to the GameObject that have the AnimatorController. This will receive the Event defined in the import of the animations and can dispatch them to some receivers. Used by step event and attack frame event on characters. AttackState BreakableObject Small class that will handle replacing a GameObject with another when the CharacterData on the same GameObject reach health = 0. Used in game for barrels, swapping a normal model for a prefab made of multiple part with physics to simulate the barrel breaking. CameraController Control the camera, mainly used as a reference to the main camera through the singleton instance, and to handle mouse wheel zooming CharacterAudio CharacterControl DamageUI Handle all the UI related to damage number appearing above object/character when they get damaged. Manage the pool of UI text and activating, placing and fading them out across time. DamageUI.ActiveText EffectIconUI Simple Monobehaviour used to get fast reference to the Image and Slider used by current active effect icone on UI EquipmentUI Keep reference and update the Equipment entry (the 6 icons around the character in the Inventory) InventoryCharacterRender InventoryUI Handle all the UI code related to the inventory (drag'n'drop of object, using objects, equipping object etc.) InventoryUI.DragData ItemEntryUI ItemTooltip LootUI Handle display the names of every loot on screen (which are button for easy pickup) RandomBGMPlayer RandomLoopOffset Will pick a random time in an animation loop to offset an animator, allowing to avoid lots of object playing the same animation loop to look synchronised ResourceManager Use this class to list common resources used by systems, so you can define them in a single place (at the time of writing, only used to store the billboard material used by the Loot system) SceneLinkedSMB<TMonoBehaviour> A custom state machine behaviour that allow to store a reference to a Monobehaviour class linked to the animator. That allow faster and more efficient access to it on state enter/exit callback (otherwise need a GetComponent each frame) SimpleEnemyController TrainingDummy UIAlphaRaycast Allow to define the alpha threshold that will let a raycast pass in the UI. By default for performance reason that threshold is set to 0 (all part of the image, even the one with = 0, stop the raycast). UISystem Main class that handle the Game UI (health, open/close inventory) Interfaces AnimationControllerDispatcher.IAttackFrameReceiver AnimationControllerDispatcher.IFootstepFrameReceiver Enums SimpleEnemyController.State"
  },
  "api/CreatorKitCodeInternal.LootUI.html": {
    "href": "api/CreatorKitCodeInternal.LootUI.html",
    "title": "Class LootUI | SceneKit Code Documentation",
    "keywords": "Class LootUI Handle display the names of every loot on screen (which are button for easy pickup) Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LootUI Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class LootUI : MonoBehaviour Fields ButtonPrefab Declaration public Button ButtonPrefab Field Value Type Description UnityEngine.UI.Button Properties Instance Declaration public static LootUI Instance { get; protected set; } Property Value Type Description LootUI Methods NewLoot(Loot) Declaration public void NewLoot(Loot loot) Parameters Type Name Description Loot loot"
  },
  "api/CreatorKitCodeInternal.DamageUI.ActiveText.html": {
    "href": "api/CreatorKitCodeInternal.DamageUI.ActiveText.html",
    "title": "Class DamageUI.ActiveText | SceneKit Code Documentation",
    "keywords": "Class DamageUI.ActiveText Inheritance System.Object DamageUI.ActiveText Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class ActiveText Fields MaxTime Declaration public float MaxTime Field Value Type Description System.Single Timer Declaration public float Timer Field Value Type Description System.Single UIText Declaration public Text UIText Field Value Type Description UnityEngine.UI.Text WorldPositionStart Declaration public Vector3 WorldPositionStart Field Value Type Description UnityEngine.Vector3 Methods PlaceText(Camera, Canvas) Declaration public void PlaceText(Camera cam, Canvas canvas) Parameters Type Name Description UnityEngine.Camera cam UnityEngine.Canvas canvas"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Creator Kit Beginner Code Documentation | SceneKit Code Documentation",
    "keywords": "Welcome to the Creator Kit Beginner Code Documentation This website act as a documentation Hub for the Beginner Code Scene Kit. This website is similar in style to the documentation website that you can find in Unity Packages, so navigating it will familiarize you with searching and reading documentation for those package. Usage Tips Some tips to use documentation in Unity efficiently. When you stumble on something you don't know in code, the step you can take : The first step is to go on the [https://docs.unity3d.com/ScriptReference/](Scripting Reference website) and use the top right search box to search the function/class you don't know In most IDE, hovering above the unknown function/class will show you the full name in the form UnitySomething.MyClass.Func . This can give you an idea of which package that function/class is part of (e.g. something name Cinemachine.Something is probably from the Cinemachine package). So go to the menu Window > Package Manager , look for package with that name, and click view documentation. This will open a website similar to that one, and click on Api Documentation on top to see the full API and search for the class there. Using this website API Documentation Contrary to Unity website you can search as easily for a function name on that website, you need to find which type it is part of (see above for how to find the full name containing the type). Once you have that type, you can find that class in the API Documentation and click on it. You have a menu on the right of the page on each type to quickly see Fields/Properties (variables) and methods (function) in a class. See the example below that show the methods of the class EquipmentSystem from the Creator Kit"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Creator Kit Beginner Kit Script Documentation | SceneKit Code Documentation",
    "keywords": "Creator Kit Beginner Kit Script Documentation This is the script documentation, here you can find an explanation of the classes used in the Beginner Code Creator Kit. There are 2 namespace on the left menu : CreatorKitCode : this is the one you should be mostly using, it contains all the classes that are useful to write your own item/equipment/weapon effects CreatorKitCodeInternal : this contains all the classes that are used to make the game systems run, but aren't directly useful to influence the gameplay."
  },
  "api/CreatorKitCode.InteractableObject.html": {
    "href": "api/CreatorKitCode.InteractableObject.html",
    "title": "Class InteractableObject | SceneKit Code Documentation",
    "keywords": "Class InteractableObject Base class for interactable object, inherit from this class and override InteractWith to handle what happen when the player interact with the object. Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour HighlightableObject InteractableObject Container Loot Inherited Members HighlightableObject.m_Renderers HighlightableObject.Start() HighlightableObject.Highlight() HighlightableObject.Dehighlight() Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public abstract class InteractableObject : HighlightableObject Properties IsInteractable Declaration public abstract bool IsInteractable { get; } Property Value Type Description System.Boolean Methods InteractWith(CharacterData) Declaration public abstract void InteractWith(CharacterData target) Parameters Type Name Description CharacterData target"
  },
  "api/CreatorKitCode.EquipmentSystem.html": {
    "href": "api/CreatorKitCode.EquipmentSystem.html",
    "title": "Class EquipmentSystem | SceneKit Code Documentation",
    "keywords": "Class EquipmentSystem Handles the equipment stored inside an instance of CharacterData. Will take care of unequipping the previous item when equipping a new one in the same slot. Inheritance System.Object EquipmentSystem Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class EquipmentSystem Properties OnEquiped Declaration public Action<EquipmentItem> OnEquiped { get; set; } Property Value Type Description System.Action < EquipmentItem > OnUnequip Declaration public Action<EquipmentItem> OnUnequip { get; set; } Property Value Type Description System.Action < EquipmentItem > Weapon Declaration public Weapon Weapon { get; } Property Value Type Description Weapon Methods Equip(EquipmentItem) Equip the given item for the given user. This won't check about requirement, this should be done by the inventory before calling equip! Declaration public void Equip(EquipmentItem item) Parameters Type Name Description EquipmentItem item Which item to equip GetItem(EquipmentItem.EquipmentSlot) Declaration public EquipmentItem GetItem(EquipmentItem.EquipmentSlot slot) Parameters Type Name Description EquipmentItem.EquipmentSlot slot Returns Type Description EquipmentItem Init(CharacterData) Declaration public void Init(CharacterData owner) Parameters Type Name Description CharacterData owner InitWeapon(Weapon, CharacterData) Declaration public void InitWeapon(Weapon wep, CharacterData data) Parameters Type Name Description Weapon wep CharacterData data Unequip(EquipmentItem.EquipmentSlot, Boolean) Unequip the item in the given slot. isReplacement is used to tell the system if this unequip was called because we equipped something new in that slot or just unequip to empty slot. This is for the weapon : the weapon slot can't be empty, so if this is not a replacement, this will auto-requip the base weapon. Declaration public void Unequip(EquipmentItem.EquipmentSlot slot, bool isReplacement = false) Parameters Type Name Description EquipmentItem.EquipmentSlot slot System.Boolean isReplacement"
  },
  "api/CreatorKitCodeInternal.SceneLinkedSMB-1.html": {
    "href": "api/CreatorKitCodeInternal.SceneLinkedSMB-1.html",
    "title": "Class SceneLinkedSMB<TMonoBehaviour> | SceneKit Code Documentation",
    "keywords": "Class SceneLinkedSMB<TMonoBehaviour> A custom state machine behaviour that allow to store a reference to a Monobehaviour class linked to the animator. That allow faster and more efficient access to it on state enter/exit callback (otherwise need a GetComponent each frame) Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject UnityEngine.StateMachineBehaviour SealedSMB SceneLinkedSMB<TMonoBehaviour> AttackState Inherited Members SealedSMB.OnStateEnter(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) SealedSMB.OnStateUpdate(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) SealedSMB.OnStateExit(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32) Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class SceneLinkedSMB<TMonoBehaviour> : SealedSMB where TMonoBehaviour : MonoBehaviour Type Parameters Name Description TMonoBehaviour The type of the reference that will be kept Fields m_MonoBehaviour Declaration protected TMonoBehaviour m_MonoBehaviour Field Value Type Description TMonoBehaviour Methods Initialise(Animator, TMonoBehaviour) Declaration public static void Initialise(Animator animator, TMonoBehaviour monoBehaviour) Parameters Type Name Description UnityEngine.Animator animator TMonoBehaviour monoBehaviour InternalInitialise(Animator, TMonoBehaviour) Declaration protected void InternalInitialise(Animator animator, TMonoBehaviour monoBehaviour) Parameters Type Name Description UnityEngine.Animator animator TMonoBehaviour monoBehaviour OnSLStateEnter(Animator, AnimatorStateInfo, Int32) Called before Updates when execution of the state first starts (on transition to the state). Declaration public virtual void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLStateEnter(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called before Updates when execution of the state first starts (on transition to the state). Declaration public virtual void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnSLStateExit(Animator, AnimatorStateInfo, Int32) Called after Updates when execution of the state first finshes (after transition from the state). Declaration public virtual void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLStateExit(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called after Updates when execution of the state first finshes (after transition from the state). Declaration public virtual void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnSLStateNoTransitionUpdate(Animator, AnimatorStateInfo, Int32) Called every frame after PostEnter when the state is not being transitioned to or from. Declaration public virtual void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLStateNoTransitionUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called every frame when the state is not being transitioned to or from. Declaration public virtual void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnSLStatePostEnter(Animator, AnimatorStateInfo, Int32) Called on the first frame after the transition to the state has finished. Declaration public virtual void OnSLStatePostEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLStatePostEnter(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called on the first frame after the transition to the state has finished. Declaration public virtual void OnSLStatePostEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnSLStatePreExit(Animator, AnimatorStateInfo, Int32) Called on the first frame after the transition from the state has started. Note that if the transition has a duration of less than a frame, this will not be called. Declaration public virtual void OnSLStatePreExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLStatePreExit(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called on the first frame after the transition from the state has started. Note that if the transition has a duration of less than a frame, this will not be called. Declaration public virtual void OnSLStatePreExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnSLTransitionFromStateUpdate(Animator, AnimatorStateInfo, Int32) Called after OnSLStatePreExit every frame during transition to the state. Declaration public virtual void OnSLTransitionFromStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLTransitionFromStateUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called after OnSLStatePreExit every frame during transition to the state. Declaration public virtual void OnSLTransitionFromStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnSLTransitionToStateUpdate(Animator, AnimatorStateInfo, Int32) Called after OnSLStateEnter every frame during transition to the state. Declaration public virtual void OnSLTransitionToStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex OnSLTransitionToStateUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Called after OnSLStateEnter every frame during transition to the state. Declaration public virtual void OnSLTransitionToStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller OnStart(Animator) Called by a MonoBehaviour in the scene during its Start function. Declaration public virtual void OnStart(Animator animator) Parameters Type Name Description UnityEngine.Animator animator OnStateEnter(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Declaration public override sealed void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller Overrides UnityEngine.StateMachineBehaviour.OnStateEnter(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32, UnityEngine.Animations.AnimatorControllerPlayable) OnStateExit(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Declaration public override sealed void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller Overrides UnityEngine.StateMachineBehaviour.OnStateExit(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32, UnityEngine.Animations.AnimatorControllerPlayable) OnStateUpdate(Animator, AnimatorStateInfo, Int32, AnimatorControllerPlayable) Declaration public override sealed void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller) Parameters Type Name Description UnityEngine.Animator animator UnityEngine.AnimatorStateInfo stateInfo System.Int32 layerIndex UnityEngine.Animations.AnimatorControllerPlayable controller Overrides UnityEngine.StateMachineBehaviour.OnStateUpdate(UnityEngine.Animator, UnityEngine.AnimatorStateInfo, System.Int32, UnityEngine.Animations.AnimatorControllerPlayable)"
  },
  "api/CreatorKitCodeInternal.InventoryUI.DragData.html": {
    "href": "api/CreatorKitCodeInternal.InventoryUI.DragData.html",
    "title": "Class InventoryUI.DragData | SceneKit Code Documentation",
    "keywords": "Class InventoryUI.DragData Inheritance System.Object InventoryUI.DragData Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class DragData Fields DraggedEntry Declaration public ItemEntryUI DraggedEntry Field Value Type Description ItemEntryUI OriginalParent Declaration public RectTransform OriginalParent Field Value Type Description UnityEngine.RectTransform"
  },
  "api/CreatorKitCodeInternal.EffectIconUI.html": {
    "href": "api/CreatorKitCodeInternal.EffectIconUI.html",
    "title": "Class EffectIconUI | SceneKit Code Documentation",
    "keywords": "Class EffectIconUI Simple Monobehaviour used to get fast reference to the Image and Slider used by current active effect icone on UI Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EffectIconUI Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class EffectIconUI : MonoBehaviour Fields BackgroundImage Declaration public Image BackgroundImage Field Value Type Description UnityEngine.UI.Image TimeSlider Declaration public Slider TimeSlider Field Value Type Description UnityEngine.UI.Slider"
  },
  "api/CreatorKitCodeInternal.AnimationControllerDispatcher.IFootstepFrameReceiver.html": {
    "href": "api/CreatorKitCodeInternal.AnimationControllerDispatcher.IFootstepFrameReceiver.html",
    "title": "Interface AnimationControllerDispatcher.IFootstepFrameReceiver | SceneKit Code Documentation",
    "keywords": "Interface AnimationControllerDispatcher.IFootstepFrameReceiver Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public interface IFootstepFrameReceiver Methods FootstepFrame() Declaration void FootstepFrame()"
  },
  "api/CreatorKitCode.Weapon.Stat.html": {
    "href": "api/CreatorKitCode.Weapon.Stat.html",
    "title": "Struct Weapon.Stat | SceneKit Code Documentation",
    "keywords": "Struct Weapon.Stat Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax [Serializable] public struct Stat Fields MaximumDamage Declaration public int MaximumDamage Field Value Type Description System.Int32 MaxRange Declaration public float MaxRange Field Value Type Description System.Single MinimumDamage Declaration public int MinimumDamage Field Value Type Description System.Int32 Speed Declaration public float Speed Field Value Type Description System.Single"
  },
  "api/CreatorKitCodeInternal.TrainingDummy.html": {
    "href": "api/CreatorKitCodeInternal.TrainingDummy.html",
    "title": "Class TrainingDummy | SceneKit Code Documentation",
    "keywords": "Class TrainingDummy Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour TrainingDummy Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class TrainingDummy : MonoBehaviour"
  },
  "api/CreatorKitCodeInternal.ItemEntryUI.html": {
    "href": "api/CreatorKitCodeInternal.ItemEntryUI.html",
    "title": "Class ItemEntryUI | SceneKit Code Documentation",
    "keywords": "Class ItemEntryUI Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ItemEntryUI Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class ItemEntryUI : MonoBehaviour, IPointerClickHandler, IPointerEnterHandler, IPointerExitHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IEventSystemHandler Fields IconeImage Declaration public Image IconeImage Field Value Type Description UnityEngine.UI.Image ItemCount Declaration public Text ItemCount Field Value Type Description UnityEngine.UI.Text Properties EquipmentItem Declaration public EquipmentItem EquipmentItem { get; } Property Value Type Description EquipmentItem Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 InventoryEntry Declaration public int InventoryEntry { get; set; } Property Value Type Description System.Int32 Owner Declaration public InventoryUI Owner { get; set; } Property Value Type Description InventoryUI Methods OnBeginDrag(PointerEventData) Declaration public void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnDrag(PointerEventData) Declaration public void OnDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnEndDrag(PointerEventData) Declaration public void OnEndDrag(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnPointerEnter(PointerEventData) Declaration public void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData OnPointerExit(PointerEventData) Declaration public void OnPointerExit(PointerEventData eventData) Parameters Type Name Description UnityEngine.EventSystems.PointerEventData eventData SetupEquipment(EquipmentItem) Declaration public void SetupEquipment(EquipmentItem itm) Parameters Type Name Description EquipmentItem itm UpdateEntry() Declaration public void UpdateEntry()"
  },
  "api/CreatorKitCodeInternal.CharacterControl.html": {
    "href": "api/CreatorKitCodeInternal.CharacterControl.html",
    "title": "Class CharacterControl | SceneKit Code Documentation",
    "keywords": "Class CharacterControl Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour CharacterControl Implements AnimationControllerDispatcher.IAttackFrameReceiver AnimationControllerDispatcher.IFootstepFrameReceiver Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class CharacterControl : MonoBehaviour, AnimationControllerDispatcher.IAttackFrameReceiver, AnimationControllerDispatcher.IFootstepFrameReceiver Fields Speed Declaration public float Speed Field Value Type Description System.Single SpurSoundClips Declaration [Header(\"Audio\")] public AudioClip[] SpurSoundClips Field Value Type Description UnityEngine.AudioClip [] WeaponLocator Declaration public Transform WeaponLocator Field Value Type Description UnityEngine.Transform Properties CurrentTarget Declaration public CharacterData CurrentTarget { get; } Property Value Type Description CharacterData Data Declaration public CharacterData Data { get; } Property Value Type Description CharacterData Instance Declaration public static CharacterControl Instance { get; protected set; } Property Value Type Description CharacterControl Methods AttackFrame() Declaration public void AttackFrame() FootstepFrame() Declaration public void FootstepFrame() InteractWith(InteractableObject) Declaration public void InteractWith(InteractableObject obj) Parameters Type Name Description InteractableObject obj SetNewRespawn(SpawnPoint) Declaration public void SetNewRespawn(SpawnPoint point) Parameters Type Name Description SpawnPoint point Implements AnimationControllerDispatcher.IAttackFrameReceiver AnimationControllerDispatcher.IFootstepFrameReceiver"
  },
  "api/CreatorKitCode.Helpers.html": {
    "href": "api/CreatorKitCode.Helpers.html",
    "title": "Class Helpers | SceneKit Code Documentation",
    "keywords": "Class Helpers Helper class containing diverse functions that avoid redoing common things. Inheritance System.Object Helpers Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class Helpers Methods RecursiveLayerChange(Transform, Int32) Declaration public static void RecursiveLayerChange(Transform root, int layer) Parameters Type Name Description UnityEngine.Transform root System.Int32 layer WrapAngle(Int32) Declaration public static int WrapAngle(int angle) Parameters Type Name Description System.Int32 angle Returns Type Description System.Int32"
  },
  "api/CreatorKitCode.ElementalEffect.html": {
    "href": "api/CreatorKitCode.ElementalEffect.html",
    "title": "Class ElementalEffect | SceneKit Code Documentation",
    "keywords": "Class ElementalEffect Default implementation of the BaseElementalEffect. The constructor allows the caller to specify what type of damage is done, how much is done and the speed (time) between each instance of damage (default 1 = every second). Inheritance System.Object BaseElementalEffect ElementalEffect Inherited Members BaseElementalEffect.Done BaseElementalEffect.CurrentTime BaseElementalEffect.Duration BaseElementalEffect.m_Duration BaseElementalEffect.m_Timer BaseElementalEffect.m_Target Namespace : CreatorKitCode Assembly : Assembly-CSharp.dll Syntax public class ElementalEffect : BaseElementalEffect, IEquatable<BaseElementalEffect> Constructors ElementalEffect(Single, StatSystem.DamageType, Int32, Single) Declaration public ElementalEffect(float duration, StatSystem.DamageType damageType, int damage, float speed = 1F) Parameters Type Name Description System.Single duration StatSystem.DamageType damageType System.Int32 damage System.Single speed Methods Applied(CharacterData) Declaration public override void Applied(CharacterData target) Parameters Type Name Description CharacterData target Overrides BaseElementalEffect.Applied(CharacterData) Equals(BaseElementalEffect) Declaration public override bool Equals(BaseElementalEffect other) Parameters Type Name Description BaseElementalEffect other Returns Type Description System.Boolean Overrides BaseElementalEffect.Equals(BaseElementalEffect) Removed() Declaration public override void Removed() Overrides BaseElementalEffect.Removed() Update(StatSystem) Declaration public override void Update(StatSystem statSystem) Parameters Type Name Description StatSystem statSystem Overrides BaseElementalEffect.Update(StatSystem)"
  },
  "api/CreatorKitCodeInternal.CameraController.html": {
    "href": "api/CreatorKitCodeInternal.CameraController.html",
    "title": "Class CameraController | SceneKit Code Documentation",
    "keywords": "Class CameraController Control the camera, mainly used as a reference to the main camera through the singleton instance, and to handle mouse wheel zooming Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour CameraController Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class CameraController : MonoBehaviour Fields GameplayCamera Declaration public Camera GameplayCamera Field Value Type Description UnityEngine.Camera m_CurrentDistance Declaration protected float m_CurrentDistance Field Value Type Description System.Single m_FramingTransposer Declaration protected CinemachineFramingTransposer m_FramingTransposer Field Value Type Description Cinemachine.CinemachineFramingTransposer MaxAngle Angle in degree (down compared to horizon) the camera will look at when at the farthest of the character Declaration public float MaxAngle Field Value Type Description System.Single MaxDistance Distance at which the camera is from the character when at the max zoom level Declaration public float MaxDistance Field Value Type Description System.Single MinAngle Angle in degree (down compared to horizon) the camera will look at when at the closest of the character Declaration public float MinAngle Field Value Type Description System.Single MinDistance Distance at which the camera is from the character when at the closest zoom level Declaration public float MinDistance Field Value Type Description System.Single Properties Camera Declaration public CinemachineVirtualCamera Camera { get; protected set; } Property Value Type Description Cinemachine.CinemachineVirtualCamera Instance Declaration public static CameraController Instance { get; set; } Property Value Type Description CameraController Methods Zoom(Single) Zoom of the given distance. Note that distance need to be a param between 0...1,a d the distance is a ratio Declaration public void Zoom(float distance) Parameters Type Name Description System.Single distance The distance to zoom, need to be in range [0..1] (will be clamped)"
  },
  "api/CreatorKitCode.html": {
    "href": "api/CreatorKitCode.html",
    "title": "Namespace CreatorKitCode | SceneKit Code Documentation",
    "keywords": "Namespace CreatorKitCode Classes BaseElementalEffect The base class to derive from to write you own custom Elemental effect that can be added to a StatsSystem. There is a default implementation called ElementalEffect that can be used to make Physical/Fire/Electrical/Cold damage across time. A derived class must implement the Equals function so we can check if 2 effects are the same (e.g. the default implementation ElementalEffect will consider 2 effect equal if they do the same DamageType). CharacterData This defines a character in the game. The name Character is used in a loose sense, it just means something that can be attacked and have some stats including health. It could also be an inanimate object like a breakable box. Container Special InteractableObject that will trigger the LootSpawner on it when interacted with, and delete itself (a container can only be looted once). ElementalEffect Default implementation of the BaseElementalEffect. The constructor allows the caller to specify what type of damage is done, how much is done and the speed (time) between each instance of damage (default 1 = every second). EquipmentItem Special Item than can be equipped. They can have a minimum stats value needed to equip them, and you can add EquippedEffect which will be executed when the object is equipped and unequipped, allowing to code special behaviour when the player equipped those object, like raising stats. EquipmentItem.EquippedEffect EquipmentSystem Handles the equipment stored inside an instance of CharacterData. Will take care of unequipping the previous item when equipping a new one in the same slot. Helpers Helper class containing diverse functions that avoid redoing common things. HighlightableObject All object that can be highlighted (enemies, interactable object etc.) derive from this class, which takes care of setting the material parameters for it when it gets highlighted. If the object use another material, it will just ignore all the changes. InteractableObject Base class for interactable object, inherit from this class and override InteractWith to handle what happen when the player interact with the object. InventorySystem This handles the inventory of our character. The inventory has a maximum of 32 slot, each slot can hold one TYPE of object, but those can be stacked without limit (e.g. 1 slot used by health potions, but contains 20 health potions) InventorySystem.InventoryEntry One entry in the inventory. Hold the type of Item and how many there is in that slot. Item Base clase of all items in the game. This is an abstract class and need to be inherited to specify behaviour. The project offer 3 type of items : UsableItem, Equipment and Weapon Loot Describes an InteractableObject that can be picked up and grants a specific item when interacted with. It will also play a small animation (object going in an arc from spawn point to a random point around) when the object is actually \"spawned\", and the object becomes interactable only when that animation is finished. Finally it will notify the LootUI that a new loot is available in the world so the UI displays the name. LootSpawner This class handle creating loot. It got a list of events and each events have a list of items with associated weight. When the spawn is triggered through the SpawnLoot function, it will spawn one item per events, with the item being picked randomly per event LootSpawner.LootEntry LootSpawner.SpawnEvent SFXManager Class that handle all the SFX. Through its functions you can play a SFX of a given type at a given position. It use pooling to pre-create all the source and recycle them for efficiency reason. SFXManager.PlayData Store all data used to play a sound. The pitch will be picked randomly between PitchMin and PitchMax. SpawnPoint When the player walks through the trigger on the same GameObject as this script, the GameObject position becomes the new place where the player will respawn when their health reaches 0. StatSystem Handles the stats of a CharacterData. It stores the health and strength/agility/defense stats. This class contains various functions for interacting with stats, by adding stat modifications, elemental effects or damage. StatSystem.StatModifier Can be added to a stack of modifiers on the StatSystem to modify the value of the base stats e.g. a weapon adding +2 strength will push a modifier on the top of the stack. They have 2 modes : Absolute, where values are added as is, and Percentage, where values are converted to percentage (e.g. a value of 50 in strength in a Percentage modifier will increase the strength by 50%). StatSystem.Stats Store the stats, which are composed of 4 values : health, strength, agility and defense. It also contains elemental protections and boost (1 for each elements defined by the DamageType enum) StatSystem.TimedStatModifier This is a special StatModifier, that gets added to the TimedStatModifier stack, that will be automatically removed when its timer reaches 0. Contains a StatModifier that controls the actual modification. UsableItem Describe an usable item. A usable item is an item that can be used in the inventory by double clicking on it. When it is used, all the stored UsageEffects will be run, allowing to specify what that item does. (e.g. a AddHealth effect will give health point back to the user) UsableItem.UsageEffect VFXDatabase Allows you to define a list of VFX prefabs each with a name. An editor script takes care of generating a C# file containing an enum with the given name to index the Entries array. This allows you to call methods such as VFXManager.GetVFX(VFXType.MyEffectName). See the VFXManager class for more details. VFXDatabase.VFXDBEntry An entry in the VFXDatabase, storing all the data needed to create the pools of instances of VFX. VFXManager Handles displaying VFX in the game. One instance should be in the scene, and is part of the Manager prefab. It will create pools of the VFX prefabs defined in the given VFXDatabase, and through the GetVFX/PlayVFX methods allows you to get an instance at a given position. The pools are rotating queue, so when you are finished with an instance, that instance will be moved to the back of the available instance queue. VFXManager.VFXInstance One instance of VFX. The Effect field is the actual GameObject of the effect you can disable once it is finished. The Index field is used by the manager to know which effect this instance is part of. Weapon Special case of EquipmentItem for weapon, as they have a whole attack system in addition. Like Equipment they can have minimum stats and equipped effect, but also have a list of WeaponAttackEffect that will have their OnAttack function called during a hit, and their OnPostAttack function called after all OnAttack of all effects are called. Weapon.AttackData This class will store damage done to a target CharacterData by a source CharacterData. The function to add damage will take care of applied all the strength/boost of the source and remove defense/resistance of the target. The source can be null when its done by an non CharacterData source (elemental effect, environment etc.) Weapon.WeaponAttackEffect Base class of all effect you can add on a weapon to specialize it. See documentation on How to write a new Weapon Effect. Structs Weapon.Stat Enums EquipmentItem.EquipmentSlot SFXManager.Use StatSystem.DamageType The type of damage that exist, each will have their own boost/protection in stats, only the main, Physical, is influence by strength and defense stats. StatSystem.StatModifier.Mode The mode of the modifier : Percentage will divide the value by 100 to get a percentage, absolute use the value as is."
  },
  "api/CreatorKitCodeInternal.SimpleEnemyController.State.html": {
    "href": "api/CreatorKitCodeInternal.SimpleEnemyController.State.html",
    "title": "Enum SimpleEnemyController.State | SceneKit Code Documentation",
    "keywords": "Enum SimpleEnemyController.State Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public enum State Fields Name Description ATTACKING IDLE PURSUING"
  },
  "api/CreatorKitCodeInternal.InventoryUI.html": {
    "href": "api/CreatorKitCodeInternal.InventoryUI.html",
    "title": "Class InventoryUI | SceneKit Code Documentation",
    "keywords": "Class InventoryUI Handle all the UI code related to the inventory (drag'n'drop of object, using objects, equipping object etc.) Inheritance System.Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour InventoryUI Namespace : CreatorKitCodeInternal Assembly : Assembly-CSharp.dll Syntax public class InventoryUI : MonoBehaviour Fields DragCanvas Declaration public Canvas DragCanvas Field Value Type Description UnityEngine.Canvas EquipementUI Declaration public EquipmentUI EquipementUI Field Value Type Description EquipmentUI ItemEntryPrefab Declaration public ItemEntryUI ItemEntryPrefab Field Value Type Description ItemEntryUI ItemSlots Declaration public RectTransform[] ItemSlots Field Value Type Description UnityEngine.RectTransform [] Tooltip Declaration public ItemTooltip Tooltip Field Value Type Description ItemTooltip Properties Character Declaration public CharacterData Character { get; } Property Value Type Description CharacterData CurrentlyDragged Declaration public InventoryUI.DragData CurrentlyDragged { get; set; } Property Value Type Description InventoryUI.DragData DragCanvasScaler Declaration public CanvasScaler DragCanvasScaler { get; } Property Value Type Description UnityEngine.UI.CanvasScaler Methods EquipmentDoubleClicked(EquipmentItem) Declaration public void EquipmentDoubleClicked(EquipmentItem equItem) Parameters Type Name Description EquipmentItem equItem HandledDroppedEntry(Vector3) Declaration public void HandledDroppedEntry(Vector3 position) Parameters Type Name Description UnityEngine.Vector3 position Init() Declaration public void Init() Load(CharacterData) Declaration public void Load(CharacterData data) Parameters Type Name Description CharacterData data ObjectDoubleClicked(InventorySystem.InventoryEntry) Declaration public void ObjectDoubleClicked(InventorySystem.InventoryEntry usedItem) Parameters Type Name Description InventorySystem.InventoryEntry usedItem ObjectHoveredEnter(ItemEntryUI) Declaration public void ObjectHoveredEnter(ItemEntryUI hovered) Parameters Type Name Description ItemEntryUI hovered ObjectHoverExited(ItemEntryUI) Declaration public void ObjectHoverExited(ItemEntryUI exited) Parameters Type Name Description ItemEntryUI exited"
  }
}